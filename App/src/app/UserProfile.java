/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package app;

/*
Validity of a booking
1 for perfectly alright
0 for waitlist
2 for cancelled
*/

import static app.DBConnection.InsertRow;
import static app.Utilities.*;
import static app.DBConnection.getResult;
import java.awt.Dimension;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Date;
import java.util.Set;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author vamsi
 */
public class UserProfile extends javax.swing.JFrame {

    static String username;
    /**
     * Creates new form UserProfile
     */
    public UserProfile(String username) {
        this.username = username;
        initComponents();
    }
    DefaultTableModel model;
   
 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        welcome = new javax.swing.JLabel();
        Username = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Bookings = new javax.swing.JTable();
        CheckBookings = new javax.swing.JButton();
        Cancel = new javax.swing.JButton();
        Modify = new javax.swing.JButton();
        BookingAreaGo = new javax.swing.JButton();
        RatingOption = new javax.swing.JButton();
        Rating = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        welcome.setText("Welcome");

        Username.setText(username);

        Bookings.setFont(new java.awt.Font("Noto Sans CJK JP Bold", 0, 12)); // NOI18N
        Bookings.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Booking ID", "Rooms Confirmed", "Rooms Waitlisted", "Check In Date", "Check Out Date", "Status", "Hotel ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Bookings.setRowHeight(50);
        jScrollPane1.setViewportView(Bookings);

        CheckBookings.setText("Check Bookings");
        CheckBookings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBookingsActionPerformed(evt);
            }
        });

        Cancel.setText("Cancel");
        Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelActionPerformed(evt);
            }
        });

        Modify.setText("Modify");
        Modify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModifyActionPerformed(evt);
            }
        });

        BookingAreaGo.setText("New Booking");
        BookingAreaGo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BookingAreaGoActionPerformed(evt);
            }
        });

        RatingOption.setText("Give Rating");
        RatingOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RatingOptionActionPerformed(evt);
            }
        });

        Rating.setText("jTextField1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addGap(12, 12, 12))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(224, 224, 224)
                                .addComponent(welcome)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Username))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(125, 125, 125)
                                .addComponent(BookingAreaGo)
                                .addGap(46, 46, 46)
                                .addComponent(Cancel)
                                .addGap(45, 45, 45)
                                .addComponent(Modify)
                                .addGap(18, 18, 18)
                                .addComponent(Rating, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(RatingOption)))
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGap(273, 273, 273)
                .addComponent(CheckBookings)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(welcome)
                    .addComponent(Username))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(CheckBookings)
                .addGap(32, 32, 32)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Modify)
                    .addComponent(Cancel)
                    .addComponent(BookingAreaGo)
                    .addComponent(RatingOption)
                    .addComponent(Rating, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(70, 70, 70))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CheckBookingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBookingsActionPerformed
        String query="SELECT * FROM booking_info WHERE username=\""+username+"\"";
        ResultSet RSet = getResult(query);
        int i=0;
        model = (DefaultTableModel) Bookings.getModel();
        model.setRowCount(0);
        try {
            while(RSet.next()){
                int bid = RSet.getInt("Booking_ID");
                int roomconf = RSet.getInt("rooms_confirmed");
                int roomwait = RSet.getInt("rooms_waitlist");
                java.sql.Date datein=RSet.getDate("Date_In");
                java.sql.Date dateout=RSet.getDate("Date_Out");
                int status=RSet.getInt("Status");
                int hid=RSet.getInt("Hotel_ID");
                String stat = null;
                if(status==0)
                {
                    stat="Confirmed";
                }
                else if(status==1)
                {
                    stat="Waitlisted";
                }
                else if(status==2)
                {
                    stat="Cancelled";
                }
                Object row[] = {bid,roomconf,roomwait,datein,dateout,stat,hid};
                model.addRow(row);
                //Bookings.setRowSelectionAllowed(true);
            }
        }catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_CheckBookingsActionPerformed

    private void CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelActionPerformed
        
        try{
        // Change Status to Cancelled    
        model = (DefaultTableModel) Bookings.getModel();
        int rowIndex = Bookings.getSelectedRow();
        int bookid= (int) model.getValueAt(rowIndex, 0);
        int hid=(int) model.getValueAt(rowIndex,6);
        java.sql.Date datein=(java.sql.Date) model.getValueAt(rowIndex,3);
        java.sql.Date dateout=(java.sql.Date) model.getValueAt(rowIndex,4);
        InsertRow("UPDATE booking_info SET Status=2 WHERE Booking_ID=\""+bookid+"\";");
        // Waitlist Implementation
        //int avail=checkAvailiability(hid1,datein,dateout);
        ResultSet rs = getResult("SELECT CURDATE()");
        rs.next();
        Date today = rs.getDate("CURDATE()");
        int setFlag = 0;
        if(getDateDifference(datein, today) < 3){
             setFlag = 1;
        }
        String query = "SELECT * FROM booking_info where Status=1 AND Hotel_ID = " + hid +  " ORDER BY Booking_ID ASC";
        ResultSet rs2=getResult(query);
        
        while(rs2.next()){
            int bid = rs2.getInt("Booking_ID");
            int wlrooms=rs2.getInt("rooms_waitlist");
            int cnfrooms = rs2.getInt("rooms_confirmed");
            Date date_in = rs2.getDate("Date_In");
            Date date_out = rs2.getDate("Date_Out");
            try{
            rs = getResult("SELECT CURDATE();");
            rs.next();            
            today = rs.getDate("CURDATE()");
        }catch(SQLException e){
            e.printStackTrace();
        }
            int rooms_available = (int) (checkAvailability(hid, date_in, date_out));
            if(rooms_available > 0){
                if(rooms_available > wlrooms){
                    cnfrooms += wlrooms;
                    wlrooms = 0;
                }
                if(rooms_available == wlrooms){
                    wlrooms = 0;
                    cnfrooms += rooms_available;
                }
                else{
                    wlrooms -= rooms_available;
                    cnfrooms += rooms_available;
                }
                InsertRow("UPDATE booking_info SET rooms_confirmed = " + cnfrooms + " WHERE Booking_ID= "+bid+";");
                InsertRow("UPDATE booking_info SET rooms_waitlist = " + wlrooms + " WHERE Booking_ID= "+bid+";");
            }        
            if(setFlag == 1){
                  JOptionPane.showMessageDialog(null, "Cancellation fee of 50% has been levied as you're booking within 3 days.", "WARNING!", JOptionPane.WARNING_MESSAGE);
            }
        }
        }catch(Exception e)
        {
            System.out.println(e);
        }
        
        
    }//GEN-LAST:event_CancelActionPerformed

    private void BookingAreaGoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BookingAreaGoActionPerformed
        this.dispose();
        new BookingArea(username).setVisible(true);
    }//GEN-LAST:event_BookingAreaGoActionPerformed

    private void ModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModifyActionPerformed
        try {
            int rowIndex = Bookings.getSelectedRow();
            model = (DefaultTableModel) Bookings.getModel();
            int bookingID = (int) model.getValueAt(rowIndex, 0);
            java.sql.Date datein=(java.sql.Date) model.getValueAt(rowIndex,3);
            java.sql.Date dateout=(java.sql.Date) model.getValueAt(rowIndex,4);
            ResultSet rs = getResult("SELECT CURDATE()");
            rs.next();
            Date today = rs.getDate("CURDATE()");
            if(getDateDifference(datein, today) < 3){
                JOptionPane.showMessageDialog(null, "You cannot modify now.", "WARNING!", JOptionPane.WARNING_MESSAGE);
                return;
            }         
            new ModifyBooking(username, bookingID).setVisible(true);
            this.dispose();
        } catch (SQLException ex) {
            Logger.getLogger(UserProfile.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ModifyActionPerformed

    private void RatingOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RatingOptionActionPerformed
        try {
            // TODO add your handling code here:
            int rowIndex = Bookings.getSelectedRow();
            model = (DefaultTableModel) Bookings.getModel();
            int bookingID = (int) model.getValueAt(rowIndex, 0);
            int rating = Integer.parseInt(Rating.getText());
            ResultSet rs = getResult("SELECT Hotel_ID from booking_info WHERE Booking_ID = " + bookingID + ";");            
            rs.next();
            int hid = rs.getInt("Hotel_ID");
            String query = "SELECT MAX(review_id) FROM hotel_reviews;";
            rs = getResult(query);
            rs.next();
            int cid = (int) rs.getInt("MAX(review_id)") + 1;
            query = "INSERT INTO hotel_reviews VALUES(" + cid + ", \"" + username + "\", " + hid + ", " + rating +");"; 
            InsertRow(query);
        } catch (SQLException ex) {
            Logger.getLogger(UserProfile.class.getName()).log(Level.SEVERE, null, ex);
        }
        
                
    }//GEN-LAST:event_RatingOptionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserProfile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserProfile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserProfile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserProfile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                UserProfile up=new UserProfile(username);
                up.setVisible(true);
                //up.function();
                
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BookingAreaGo;
    private javax.swing.JTable Bookings;
    private javax.swing.JButton Cancel;
    private javax.swing.JButton CheckBookings;
    private javax.swing.JButton Modify;
    private javax.swing.JTextField Rating;
    private javax.swing.JButton RatingOption;
    private javax.swing.JLabel Username;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel welcome;
    // End of variables declaration//GEN-END:variables
}
