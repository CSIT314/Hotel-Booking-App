/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package app;

import static app.DBConnection.getResult;
import java.sql.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author rohit
 */
public class BookingArea extends javax.swing.JFrame {

    
    DefaultTableModel model;
    /**
     * Creates new form BookingArea
     */
    public BookingArea() {
        initComponents();
    }
    
    private String[] getCityList(){
        ResultSet RSet = getResult("SELECT DISTINCT City FROM room_info");
        ArrayList<String> cities = new ArrayList<>(); 
        try {
            while(RSet.next()){
                cities.add(RSet.getString("City"));
            }
        }catch (SQLException ex) {
            ex.printStackTrace();
        }
        String[] city_names = cities.toArray(new String[0]);  
        for(int i=0;i<city_names.length;i++)
            System.out.println(city_names[i]);
        return city_names;
    }
    
    private void update_listing()
    {
        String query= "SELECT * FROM room_info WHERE city=\""+City.getSelectedItem()+"\"";
        if(CompBF.isSelected()){
            query+=" AND COMP_BF = 1";
        }
        if(AC.isSelected()){
            query+=" AND AC = 1";
        }
        if(Wifi.isSelected()){
            query+=" AND WiFi = 1";
        }
        if(CarRental.isSelected()){
            query+=" AND Car_Rental = 1";
        }
        if(Pool.isSelected()){
            query+=" AND Swimming_Pool = 1";
        }
        query+=" AND tariff < ";
        query+= MaxPrice.getValue();
        System.out.println(query);
        ResultSet RSet = getResult(query);
        int i=0;
        model = (DefaultTableModel) HotelsAvailable.getModel();
        model.setRowCount(0);
        try {
            while(RSet.next()){
                String hotel = RSet.getString("Hotel_Name");
                String address = RSet.getString("Address");
                int tariff = RSet.getInt("Tariff");
                int rating  = 0;
                Object row[] = {hotel, address, tariff, rating};
                model.addRow(row);
            }
        }catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        City = new javax.swing.JComboBox<>();
        Search = new javax.swing.JButton();
        CheckInTimeLabel = new javax.swing.JLabel();
        CheckOutTimeLabel = new javax.swing.JLabel();
        AC = new javax.swing.JCheckBox();
        Wifi = new javax.swing.JCheckBox();
        CarRental = new javax.swing.JCheckBox();
        CompBF = new javax.swing.JCheckBox();
        CheckInDate = new org.jdesktop.swingx.JXDatePicker();
        CheckOutDate = new org.jdesktop.swingx.JXDatePicker();
        Pool = new javax.swing.JCheckBox();
        HotelsScrollArea = new javax.swing.JScrollPane();
        HotelsAvailable = new javax.swing.JTable();
        MaxPrice = new javax.swing.JSlider(50, 99000, 15000);
        MaxPriceLabel = new javax.swing.JLabel();
        BookNow = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        City.setModel(new javax.swing.DefaultComboBoxModel(getCityList()));
        City.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CityActionPerformed(evt);
            }
        });

        Search.setText("Go");
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });

        CheckInTimeLabel.setText("CheckIn");

        CheckOutTimeLabel.setText("CheckOut");

        AC.setText("AC");
        AC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ACActionPerformed(evt);
            }
        });

        Wifi.setText("WiFi");
        Wifi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WifiActionPerformed(evt);
            }
        });

        CarRental.setText("Car Rental");
        CarRental.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CarRentalActionPerformed(evt);
            }
        });

        CompBF.setText("Complimentary Breakfast");
        CompBF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CompBFActionPerformed(evt);
            }
        });

        Pool.setText("Swimming Pool");
        Pool.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PoolActionPerformed(evt);
            }
        });

        HotelsAvailable.setFont(new java.awt.Font("Noto Sans Mono CJK JP Bold", 0, 12)); // NOI18N
        HotelsAvailable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Hotel Name", "Address", "Tariff", "Rating"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        HotelsAvailable.setRowHeight(50);
        HotelsAvailable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        HotelsScrollArea.setViewportView(HotelsAvailable);

        MaxPrice.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                MaxPriceStateChanged(evt);
            }
        });

        MaxPriceLabel.setText("Max Price: " + MaxPrice.getValue());

        BookNow.setText("Check Availability");
        BookNow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BookNowActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 9, Short.MAX_VALUE)
                        .addComponent(HotelsScrollArea, javax.swing.GroupLayout.PREFERRED_SIZE, 749, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(111, 111, 111)
                        .addComponent(CarRental)
                        .addGap(34, 34, 34)
                        .addComponent(Pool)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(MaxPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(98, 98, 98))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(MaxPriceLabel)
                                .addGap(158, 158, 158))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(City, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CheckInTimeLabel)
                                .addGap(4, 4, 4))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(CompBF)
                                .addGap(18, 18, 18)
                                .addComponent(AC)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(Wifi))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(CheckInDate, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CheckOutTimeLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CheckOutDate, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Search)))))
                .addGap(23, 23, 23))
            .addGroup(layout.createSequentialGroup()
                .addGap(335, 335, 335)
                .addComponent(BookNow)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(City, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CheckInDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CheckOutTimeLabel)
                    .addComponent(CheckOutDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CheckInTimeLabel)
                    .addComponent(Search))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Wifi)
                            .addComponent(AC)
                            .addComponent(CompBF)
                            .addComponent(MaxPriceLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CarRental)
                            .addComponent(Pool)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(MaxPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(HotelsScrollArea, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BookNow)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        update_listing();
    }//GEN-LAST:event_SearchActionPerformed

    private void CarRentalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CarRentalActionPerformed
        update_listing();
    }//GEN-LAST:event_CarRentalActionPerformed

    private void CompBFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CompBFActionPerformed
        update_listing();
    }//GEN-LAST:event_CompBFActionPerformed

    private void CityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CityActionPerformed
        update_listing();
    }//GEN-LAST:event_CityActionPerformed

    private void PoolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PoolActionPerformed
        update_listing();
    }//GEN-LAST:event_PoolActionPerformed

    private void MaxPriceStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_MaxPriceStateChanged
        MaxPriceLabel.setText("Max Price:" + MaxPrice.getValue());
        update_listing();
        
    }//GEN-LAST:event_MaxPriceStateChanged

    private void ACActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ACActionPerformed
        update_listing();
    }//GEN-LAST:event_ACActionPerformed

    private void WifiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WifiActionPerformed
        update_listing();
    }//GEN-LAST:event_WifiActionPerformed

    private void BookNowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BookNowActionPerformed
//        SimpleDateFormat formater = new SimpleDateFormat("dd/MM/yyyy");
//        String dateStr = CheckInDate.getDate().toString();
//        DateFormat formatter = new SimpleDateFormat("E MMM dd HH:mm:ss Z yyyy");
//        Date date = (Date)formatter.parse(dateStr); 
//        Calendar cal = Calendar.getInstance();
//        cal.setTime(date);
//        String formatedDate = cal.get(Calendar.DATE) + "/" + (cal.get(Calendar.MONTH) + 1) + "/" +         cal.get(Calendar.YEAR);
//        java.util.Date date1 = formater.parse(formatedDate);
//        java.sql.Date sqlDate = new java.sql.Date(date1.getTime());

    }//GEN-LAST:event_BookNowActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BookingArea.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BookingArea.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BookingArea.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BookingArea.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BookingArea().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox AC;
    private javax.swing.JButton BookNow;
    private javax.swing.JCheckBox CarRental;
    private org.jdesktop.swingx.JXDatePicker CheckInDate;
    private javax.swing.JLabel CheckInTimeLabel;
    private org.jdesktop.swingx.JXDatePicker CheckOutDate;
    private javax.swing.JLabel CheckOutTimeLabel;
    private javax.swing.JComboBox<String> City;
    private javax.swing.JCheckBox CompBF;
    private javax.swing.JTable HotelsAvailable;
    private javax.swing.JScrollPane HotelsScrollArea;
    private javax.swing.JSlider MaxPrice;
    private javax.swing.JLabel MaxPriceLabel;
    private javax.swing.JCheckBox Pool;
    private javax.swing.JButton Search;
    private javax.swing.JCheckBox Wifi;
    // End of variables declaration//GEN-END:variables
}
